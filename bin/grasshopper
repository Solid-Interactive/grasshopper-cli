#!/usr/bin/env node

var program = require('commander'),
    ProgressBar = require('progress'),
    inquirer = require("inquirer"),
    clc = require('cli-color'),
    fs = require('fs'),
    path = require('path'),
    q = require('q'),
    Mongo = require('../lib/mongo'),
    _ = require('lodash'),
    guid = (function() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return function() {
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        };
    })();;


function notice(str){
    console.log(clc.blue(str));
}

function statement(str){
    console.log(clc.green(str));
    console.log('');
}

function error(str) {
    console.log(clc.red(str));
    console.log('');
}

function trace(str) {
    console.log(clc.magenta(str));
    console.log('');
}

function printWelcome(){
    notice('');
    notice('                      ___ --.');
    notice('                    .`   \'.  \\');
    notice('               ,_          | |');
    notice('         .""""""|\'.""""""-./-;');
    notice('       |__.----| \\ \'.      |0 \\');
    notice('    __/ /  /  /|  \\  \'.____|__|');
    notice('    `""""""""`"|`""\'---\'|  \\');
    notice('           .---\'        /_  |_');
    notice('');
}

function validateProject(config){
    var validate = require('../lib/validate');
    return validate.hasPackageFile(config);
}

function installNpm(name){
    var exec = require('child_process').exec,
        cmd = 'npm install ' + name + ' --save',
        child = exec(cmd),
        deferred = q.defer();

    trace('RUNNING: ' + cmd);

    child.on('error', function(err){
        deferred.reject(err);
    });

    child.on('close', function(code){
        if(code === 0){
            deferred.resolve();
        }
        else {
            deferred.reject(new Error(code));
        }
    });

    return deferred.promise;
}

function installNpms(config){
    var bar = new ProgressBar('  Please wait: [:bar] :elapsed(sec)', {
            complete: '='
            , incomplete: ' '
            , width: 60
            , total: 60
        }),
        deferred = q.defer(),
        complete = false;

    deferred.resolve(config);
    return deferred.promise;

    function forward() {
        if(!complete){
            bar.tick(1);
            if (bar.curr > 58) {
                backward();
            } else {
                setTimeout(forward, 50);
            }
        }
    }

    function backward() {
        if(!complete){
            bar.tick(-1);
            if (bar.curr == 1) {
                forward();
            } else {
                setTimeout(backward, 50);
            }
        }
    }

    installNpm('grasshopper-api').then(
        function(){
            bar.update(1);
            trace('');
            trace('Complete...');

            installNpm('grasshopper-admin').then(
                function(){
                    complete = true;
                    bar.update(1);
                    bar.complete = true;
                    bar.terminate();

                    trace('Complete...');
                    deferred.resolve(config);
                },
                function(err){
                    error('Could not install npm `grasshopper-admin` error: ' + err.message);
                    throw err;
                }
            );
        },
        function(err){
            error('Could not install npm `grasshopper-api` error: ' + err.message);
            throw err;
        }
    );

    setTimeout(function(){
        forward();
    },10);

    return deferred.promise;
}

//Function will take a mongo connection url and build the grasshopper configuration section for db and pass it along
function configureMongoDatabase(config) {
    var questions = [{
            type: 'input',
            name: 'mongoUrl',
            message: 'Enter the full MongoDB connection URL:'
        }],
        deferred = q.defer();

    function configDb(){
        inquirer.prompt(questions, function( answers ) {
            var db = new Mongo(answers.mongoUrl);

            if( answers.mongoUrl  === '') {
                error('');
                error('Database `URL`(mongodb://[username:password@]host1[:port1]) is required. Please try again.');
                configDb();
            }
            else {
                db.testConnection().then(
                    function(){
                        deferred.resolve(_.merge(config, { db: db.buildConfig() }));
                    },
                    function(err){
                        error(err.message);
                        configDb();
                    }
                );
            }
        });
    }

    statement('Configuring MongoDB connection...');
    configDb();

    return deferred.promise;
}

function configureLogger(config){
    var questions = [{
            type: 'input',
            name: 'appName',
            message: 'What is the name of your application?'
        },{
            type: 'input',
            name: 'machineName',
            message: 'What is the name of this machine?'
        },{
            type: 'checkbox',
            name: 'types',
            message: 'Select adapters that you would like to use?',
            choices: ['Console', 'File']
        }],
        deferred = q.defer();

    function buildConfig(conf) {
        var logger = {
                adapters: []
            };

        _.each(conf.types, function(type) {
            var adapter = {
                type: type.toLowerCase(),
                application: conf.appName,
                machine: conf.machineName
            };

            if(type === 'File'){
                adapter.path = conf.fileLocation;
            }

            logger.adapters.push(adapter);
        });

        deferred.resolve(_.merge(config, logger));
    }

    function askQuestions(){
        inquirer.prompt(questions, function( answers ) {
            if(
                _.find(answers.types, function(type) {
                    return type === 'File'
                })
            ){
                inquirer.prompt([{
                    type: 'input',
                    name: 'fileLocation',
                    message: 'Where do you want to save your logs?',
                    default: path.join(config.project.home, 'logs', answers.appName + '.log')
                }], function( fileLocation ) {
                    buildConfig(_.merge(answers, fileLocation));
                });
            }
            else {
                buildConfig(answers);
            }

        });
    }

    statement('Configuring Grasshopper Logging...');
    askQuestions();

    return deferred.promise;
}

function configureApi(config){
    return configureMongoDatabase(config);
}

function writeConfig(config){
    var tpl = _.template(fs.readFileSync(path.join(__dirname, '../templates/core.tpl'), 'utf-8')),
        output = tpl(config),
        deferred = q.defer();

    fs.writeFile(config.project.home, ouput, 'utf-8', function(err){
        if(err){
            throw err;
            return;
        }
        deferred.resolve(config);
    });

    return deferred.promise;
}

function configureAdmin(projectHome){
    /*var questions = [{
        type: 'input',
        name: 'path',
        message: 'Where do you want ',
        default: process.cwd()
    },{
        type: 'list',
        name: 'installType',
        message: 'What type of install would you like?',
        choices: ['Express', 'Custom']
    }];

    statement('Grasshopper Setup, please answer a few questions to get started.');

    inquirer.prompt(questions, function( answers ) {
        if(answers.installType === 'Express') {
            validateProject(answers.path).then(
                function(){
                    installNpms();
                },
                function(err){
                    error(err.message);
                }
            );
        }
    });*/
}

function setup(){
    var questions = [{
            type: 'input',
            name: 'path',
            message: 'Enter your project\'s home directory',
            default: process.cwd()
        },{
            type: 'list',
            name: 'installType',
            message: 'What type of install would you like?',
            choices: ['Express', 'Custom']
        }];

    statement('Grasshopper Setup, please answer a few questions to get started.');

    inquirer.prompt(questions, function( answers ) {
        var config = {
                project: {
                    home: answers.path
                },
                crypto: {
                    secret: guid()
                }
            };

        if(answers.installType === 'Express') {
            validateProject(config)
                .then(installNpms)
                .then(configureApi)
                .then(configureLogger)
                .then(writeConfig)
                .catch(function(err){
                    error(err.message);
                })
                .done(function(results){
                    console.log(results);
                });
        }
    });
}

program
    .version('0.0.1')
    .option('setup', 'Setup');

program.on('setup', setup);

printWelcome();
program.parse(process.argv);

